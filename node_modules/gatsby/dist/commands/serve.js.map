{"version":3,"sources":["../../src/commands/serve.ts"],"names":["process","env","GATSBY_EXPERIMENTAL_LMDB_STORE","telemetry","trackCli","readMatchPaths","program","filePath","path","join","directory","rawJSON","fs","readFile","error","report","warn","chalk","bold","JSON","parse","matchPathRouter","matchPaths","options","req","res","next","url","accepts","matchPath","find","sendFile","err","module","exports","startBackgroundUpdate","GATSBY_OPEN_TRACING_CONFIG_FILE","openTracingConfigFile","prefixPaths","port","open","host","parseInt","configModule","config","pathPrefix","configPathPrefix","trailingSlash","root","app","partytownProxiedURLs","use","thirdPartyProxyPath","router","express","Router","expressMiddleware","pages","get","pathName","getNode","values","iterateNodesByType","static","dotfiles","compiledFunctionsDir","functions","readFileSync","e","getFunctions","GraphQLEngine","require","getData","renderPageData","renderHTML","graphqlEngine","dbPath","requestedPagePath","params","pagePath","potentialPagePath","page","findPageByPath","mode","requestActivity","phantomActivity","start","spanContext","span","context","data","results","serverDataHeaders","name","value","Object","entries","setHeader","serverDataStatus","status","send","contentType","end","_","header","printInstructions","appName","urls","console","log","lanUrlForTerminal","localUrlForTerminal","startListening","listen","ssl","sitePackageJson","info","Promise","resolve","localUrlForBrowser","catch","message"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport openurl from \"better-opn\"\nimport fs from \"fs-extra\"\nimport compression from \"compression\"\nimport express from \"express\"\nimport chalk from \"chalk\"\nimport { match as reachMatch } from \"@gatsbyjs/reach-router/lib/utils\"\nimport onExit from \"signal-exit\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport { getConfigFile } from \"../bootstrap/get-config-file\"\nimport { preferDefault } from \"../bootstrap/prefer-default\"\nimport { IProgram } from \"./types\"\nimport { IPreparedUrls, prepareUrls } from \"../utils/prepare-urls\"\nimport {\n  IGatsbyConfig,\n  IGatsbyFunction,\n  IGatsbyPage,\n  IGatsbyState,\n} from \"../redux/types\"\nimport { reverseFixedPagePath } from \"../utils/page-data\"\nimport { initTracer } from \"../utils/tracer\"\nimport { configureTrailingSlash } from \"../utils/express-middlewares\"\nimport { getDataStore, detectLmdbStore } from \"../datastore\"\nimport { functionMiddlewares } from \"../internal-plugins/functions/middleware\"\nimport {\n  thirdPartyProxyPath,\n  partytownProxy,\n} from \"../internal-plugins/partytown/proxy\"\n\nprocess.env.GATSBY_EXPERIMENTAL_LMDB_STORE = `1`\ndetectLmdbStore()\n\ninterface IMatchPath {\n  path: string\n  matchPath: string\n}\n\ninterface IServeProgram extends IProgram {\n  prefixPaths: boolean\n}\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst readMatchPaths = async (\n  program: IServeProgram\n): Promise<Array<IMatchPath>> => {\n  const filePath = path.join(program.directory, `.cache`, `match-paths.json`)\n  let rawJSON = `[]`\n  try {\n    rawJSON = await fs.readFile(filePath, `utf8`)\n  } catch (error) {\n    report.warn(error)\n    report.warn(\n      `Could not read ${chalk.bold(\n        `match-paths.json`\n      )} from the .cache directory`\n    )\n    report.warn(\n      `Client-side routing will not work correctly. Maybe you need to re-run ${chalk.bold(\n        `gatsby build`\n      )}?`\n    )\n  }\n  return JSON.parse(rawJSON) as Array<IMatchPath>\n}\n\nconst matchPathRouter =\n  (\n    matchPaths: Array<IMatchPath>,\n    options: {\n      root: string\n    }\n  ) =>\n  (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const matchPath = matchPaths.find(\n        ({ matchPath }) => reachMatch(matchPath, url) !== null\n      )\n      if (matchPath) {\n        return res.sendFile(\n          path.join(matchPath.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n\nmodule.exports = async (program: IServeProgram): Promise<void> => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  await initTracer(\n    process.env.GATSBY_OPEN_TRACING_CONFIG_FILE || program.openTracingConfigFile\n  )\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const { configModule } = await getConfigFile(\n    program.directory,\n    `gatsby-config`\n  )\n  const config: IGatsbyConfig = preferDefault(configModule)\n\n  const { pathPrefix: configPathPrefix, trailingSlash } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n\n  // Proxy gatsby-script using off-main-thread strategy\n  const { partytownProxiedURLs = [] } = config || {}\n\n  app.use(thirdPartyProxyPath, partytownProxy(partytownProxiedURLs))\n\n  // eslint-disable-next-line new-cap\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n\n  router.use(\n    configureTrailingSlash(\n      () =>\n        ({\n          pages: {\n            get(pathName: string): IGatsbyPage | undefined {\n              return getDataStore().getNode(`SitePage ${pathName}`) as\n                | IGatsbyPage\n                | undefined\n            },\n            values(): Iterable<IGatsbyPage> {\n              return getDataStore().iterateNodesByType(\n                `SitePage`\n              ) as Iterable<IGatsbyPage>\n            },\n          },\n        } as unknown as IGatsbyState),\n      trailingSlash\n    )\n  )\n\n  router.use(express.static(`public`, { dotfiles: `allow` }))\n\n  const compiledFunctionsDir = path.join(\n    program.directory,\n    `.cache`,\n    `functions`\n  )\n\n  let functions: Array<IGatsbyFunction> = []\n  try {\n    functions = JSON.parse(\n      fs.readFileSync(path.join(compiledFunctionsDir, `manifest.json`), `utf-8`)\n    )\n  } catch (e) {\n    // ignore\n  }\n\n  if (functions) {\n    app.use(\n      `/api/*`,\n      ...functionMiddlewares({\n        getFunctions(): Array<IGatsbyFunction> {\n          return functions\n        },\n      })\n    )\n  }\n\n  // Handle SSR & DSG Pages\n  if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n    try {\n      const { GraphQLEngine } = require(path.join(\n        program.directory,\n        `.cache`,\n        `query-engine`\n      )) as typeof import(\"../schema/graphql-engine/entry\")\n      const { getData, renderPageData, renderHTML } = require(path.join(\n        program.directory,\n        `.cache`,\n        `page-ssr`\n      )) as typeof import(\"../utils/page-ssr-module/entry\")\n      const graphqlEngine = new GraphQLEngine({\n        dbPath: path.join(program.directory, `.cache`, `data`, `datastore`),\n      })\n\n      app.get(\n        `/page-data/:pagePath(*)/page-data.json`,\n        async (req, res, next) => {\n          const requestedPagePath = req.params.pagePath\n          if (!requestedPagePath) {\n            return void next()\n          }\n\n          const potentialPagePath = reverseFixedPagePath(requestedPagePath)\n          const page = graphqlEngine.findPageByPath(potentialPagePath)\n\n          if (page && (page.mode === `DSG` || page.mode === `SSR`)) {\n            const requestActivity = report.phantomActivity(\n              `request for \"${req.path}\"`\n            )\n            requestActivity.start()\n            try {\n              const spanContext = requestActivity.span.context()\n              const data = await getData({\n                pathName: req.path,\n                graphqlEngine,\n                req,\n                spanContext,\n              })\n              const results = await renderPageData({ data, spanContext })\n              if (page.mode === `SSR` && data.serverDataHeaders) {\n                for (const [name, value] of Object.entries(\n                  data.serverDataHeaders\n                )) {\n                  res.setHeader(name, value)\n                }\n              }\n\n              if (page.mode === `SSR` && data.serverDataStatus) {\n                return void res.status(data.serverDataStatus).send(results)\n              } else {\n                return void res.send(results)\n              }\n            } catch (e) {\n              report.error(\n                `Generating page-data for \"${requestedPagePath}\" / \"${potentialPagePath}\" failed.`,\n                e\n              )\n              return res\n                .status(500)\n                .contentType(`text/plain`)\n                .send(`Internal server error.`)\n            } finally {\n              requestActivity.end()\n            }\n          }\n\n          return void next()\n        }\n      )\n\n      router.use(async (req, res, next) => {\n        if (req.accepts(`html`)) {\n          const potentialPagePath = req.path\n          const page = graphqlEngine.findPageByPath(potentialPagePath)\n          if (page && (page.mode === `DSG` || page.mode === `SSR`)) {\n            const requestActivity = report.phantomActivity(\n              `request for \"${req.path}\"`\n            )\n            requestActivity.start()\n\n            try {\n              const spanContext = requestActivity.span.context()\n              const data = await getData({\n                pathName: potentialPagePath,\n                graphqlEngine,\n                req,\n                spanContext,\n              })\n              const results = await renderHTML({ data, spanContext })\n              if (page.mode === `SSR` && data.serverDataHeaders) {\n                for (const [name, value] of Object.entries(\n                  data.serverDataHeaders\n                )) {\n                  res.setHeader(name, value)\n                }\n              }\n\n              if (page.mode === `SSR` && data.serverDataStatus) {\n                return void res.status(data.serverDataStatus).send(results)\n              } else {\n                return void res.send(results)\n              }\n            } catch (e) {\n              report.error(\n                `Rendering html for \"${potentialPagePath}\" failed.`,\n                e\n              )\n              return res.status(500).sendFile(`500.html`, { root }, err => {\n                if (err) {\n                  res.contentType(`text/plain`).send(`Internal server error.`)\n                }\n              })\n            } finally {\n              requestActivity.end()\n            }\n          }\n        }\n        return next()\n      })\n    } catch (error) {\n      // TODO: Handle case of engine not being generated\n    }\n  }\n\n  const matchPaths = await readMatchPaths(program)\n  router.use(matchPathRouter(matchPaths, { root }))\n\n  // TODO: Remove/merge with above same block\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function (\n    _: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  function printInstructions(appName: string, urls: IPreparedUrls): void {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n  }\n\n  const startListening = (): void => {\n    app.listen(port, host, () => {\n      const urls = prepareUrls(\n        program.ssl ? `https` : `http`,\n        program.host,\n        port\n      )\n      printInstructions(\n        program.sitePackageJson.name || `(Unnamed package)`,\n        urls\n      )\n      if (open) {\n        report.info(`Opening browser...`)\n        Promise.resolve(openurl(urls.localUrlForBrowser)).catch(() =>\n          report.warn(`Browser not opened because no browser was found`)\n        )\n      }\n    })\n  }\n\n  try {\n    port = await detectPortInUseAndPrompt(port)\n    startListening()\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      return\n    }\n\n    throw e\n  }\n}\n"],"file":"serve.js"}