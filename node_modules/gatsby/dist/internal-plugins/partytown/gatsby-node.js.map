{"version":3,"sources":["../../../src/internal-plugins/partytown/gatsby-node.ts"],"names":["exports","onPreBootstrap","store","program","getState","path","join","directory","createPages","actions","createRedirect","config","partytownProxiedURLs","host","encodedURL","encodeURI","fromPath","thirdPartyProxyPath","toPath","statusCode","onCreateDevServer","app","use"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACAA,OAAO,CAACC,cAAR,GAAyB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAoC;AAC3D,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAAK,CAACE,QAAN,EAApB;AACA,QAAM,yBAAaC,cAAKC,IAAL,CAAUH,OAAO,CAACI,SAAlB,EAA8B,QAA9B,EAAwC,YAAxC,CAAb,CAAN;AACD,CAHD;AAKA;AACA;AACA;AACA;;;AACAP,OAAO,CAACQ,WAAR,GAAsB,CAAC;AAAEC,EAAAA,OAAF;AAAWP,EAAAA;AAAX,CAAD,KAA8B;AAClD,QAAM;AAAEQ,IAAAA;AAAF,MAAqBD,OAA3B;AAEA,QAAM;AAAEE,IAAAA,MAAM,GAAG;AAAX,MAAkBT,KAAK,CAACE,QAAN,EAAxB;AACA,QAAM;AAAEQ,IAAAA,oBAAoB,GAAG;AAAzB,MAAgCD,MAAtC;;AAEA,OAAK,MAAME,IAAX,IAAmBD,oBAAnB,EAAyC;AACvC,UAAME,UAAkB,GAAGC,SAAS,CAACF,IAAD,CAApC;AAEAH,IAAAA,cAAc,CAAC;AACbM,MAAAA,QAAQ,EAAG,GAAEC,0BAAoB,QAAOH,UAAW,EADtC;AAEbI,MAAAA,MAAM,EAAEJ,UAFK;AAGbK,MAAAA,UAAU,EAAE;AAHC,KAAD,CAAd;AAKD;AACF,CAfD;;AAiBO,eAAeC,iBAAf,CAAiC;AACtCC,EAAAA,GADsC;AAEtCnB,EAAAA;AAFsC,CAAjC,EAGgC;AACrC,QAAM;AAAES,IAAAA;AAAF,MAAaT,KAAK,CAACE,QAAN,EAAnB;AACA,QAAM;AAAEQ,IAAAA,oBAAoB,GAAG;AAAzB,MAAgCD,MAAM,IAAI,EAAhD;AAEAU,EAAAA,GAAG,CAACC,GAAJ,CAAQL,0BAAR,EAA6B,2BAAeL,oBAAf,CAA7B;AACD","sourcesContent":["import path from \"path\"\nimport { copyLibFiles } from \"@builder.io/partytown/utils\"\nimport { CreateDevServerArgs } from \"gatsby\"\nimport { thirdPartyProxyPath, partytownProxy } from \"./proxy\"\n\n/**\n * Copy Partytown library files to public.\n * @see {@link https://partytown.builder.io/copy-library-files}\n */\nexports.onPreBootstrap = async ({ store }): Promise<void> => {\n  const { program } = store.getState()\n  await copyLibFiles(path.join(program.directory, `public`, `~partytown`))\n}\n\n/**\n * Implement reverse proxy so scripts can fetch in web workers without CORS errors.\n * @see {@link https://partytown.builder.io/proxying-requests}\n */\nexports.createPages = ({ actions, store }): void => {\n  const { createRedirect } = actions\n\n  const { config = {} } = store.getState()\n  const { partytownProxiedURLs = [] } = config\n\n  for (const host of partytownProxiedURLs) {\n    const encodedURL: string = encodeURI(host)\n\n    createRedirect({\n      fromPath: `${thirdPartyProxyPath}?url=${encodedURL}`,\n      toPath: encodedURL,\n      statusCode: 200,\n    })\n  }\n}\n\nexport async function onCreateDevServer({\n  app,\n  store,\n}: CreateDevServerArgs): Promise<void> {\n  const { config } = store.getState()\n  const { partytownProxiedURLs = [] } = config || {}\n\n  app.use(thirdPartyProxyPath, partytownProxy(partytownProxiedURLs))\n}\n"],"file":"gatsby-node.js"}