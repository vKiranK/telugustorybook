{"version":3,"file":"index.browser-cdba1a30.js","sources":["../src/image-utils.ts","../src/components/hooks.ts","../src/components/layout-wrapper.tsx","../src/components/picture.tsx","../src/components/placeholder.tsx","../src/components/main-image.tsx","../src/components/gatsby-image.server.tsx","../src/components/gatsby-image.browser.tsx","../src/components/static-image.server.tsx","../src/components/static-image.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","EVERY_BREAKPOINT","warn","message","console","sortNumeric","a","b","getSrcSet","images","map","image","src","width","join","formatFromFilename","filename","dot","lastIndexOf","ext","slice","length","setDefaultDimensions","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","Math","round","getLowResolutionImageURL","generateImageSource","fit","options","_generateImageSource","generateImageData","pluginName","reporter","backgroundColor","placeholderURL","Error","Set","size","has","delete","add","imageSizes","imgDimensions","erroneousUserDimensions","Object","entries","filter","_","dim","outputPixelDensities","densities","dedupeAndSortDensities","calculated","getDimensionsAndAspectRatio","originalWidth","fixedDimension","sizes","density","presentationWidth","presentationHeight","unscaledWidth","fixedImageSizes","responsiveImageSizes","calculateImageSizes","result","sources","getSizes","forEach","imageSrc","Boolean","unscaled","find","img","fallback","srcSet","push","type","imageProps","placeholder","values","Array","from","sort","min","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","max","hasNativeLazyLoadSupport","HTMLImageElement","prototype","gatsbyImageIsInstalled","GATSBY___IMAGE","getImage","node","_node$images","_node$images$fallback","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","gatsbyImage","isGatsbyImageParent","childImageSharp","_node$childImageSharp","getSrc","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","getImageData","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","_breakpoints","getMainProps","isLoading","isLoaded","loading","style","left","position","top","transform","transition","willChange","shouldLoad","opacity","getPlaceholderProps","objectFit","objectPosition","wrapperStyle","bottom","right","withArtDirection","defaultImage","artDirected","output","media","process","env","NODE_ENV","source","Sizer","React","paddingTop","maxWidth","display","alt","role","LayoutWrapper","children","Fragment","Image","decoding","undefined","Picture","fallbackImage","key","propTypes","PropTypes","string","isRequired","bool","displayName","exact","arrayOf","oneOfType","Placeholder","_Picture$propTypes","propName","componentName","MainImage","altValidator","rest","object","imageCache","renderImageToStringPromise","renderImage","GatsbyImageHydrator","as","className","class","preactClass","onStartLoad","onLoad","onError","overflow","verticalAlign","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","cacheKey","useMemo","JSON","stringify","sizer","getSizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","onLoadListener","removeEventListener","animationFrame","cleanupCallback","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","createElement","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","checkDimensionProps","number","validLayouts","StaticImage","__imageData","imageData","__error","_getStaticImage","GatsbyImageBrowser"],"mappings":"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"}