{"version":3,"file":"index.browser-bd6b0c0c.js","sources":["../src/image-utils.ts","../src/components/hooks.ts","../src/components/layout-wrapper.tsx","../src/components/picture.tsx","../src/components/placeholder.tsx","../src/components/main-image.tsx","../src/components/gatsby-image.browser.tsx","../src/components/gatsby-image.server.tsx","../src/components/static-image.server.tsx","../src/components/static-image.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","EVERY_BREAKPOINT","warn","message","console","sortNumeric","a","b","getSrcSet","images","map","image","src","width","join","formatFromFilename","filename","dot","lastIndexOf","ext","slice","length","setDefaultDimensions","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","Math","round","generateImageData","pluginName","generateImageSource","fit","options","reporter","backgroundColor","placeholderURL","Error","Set","size","has","add","imageSizes","imgDimensions","erroneousUserDimensions","Object","entries","filter","_","dim","outputPixelDensities","densities","dedupeAndSortDensities","calculated","getDimensionsAndAspectRatio","originalWidth","fixedDimension","sizes","density","presentationWidth","presentationHeight","unscaledWidth","fixedImageSizes","responsiveImageSizes","calculateImageSizes","result","sources","getSizes","forEach","imageSrc","Boolean","unscaled","find","img","fallback","srcSet","push","type","imageProps","placeholder","values","Array","from","sort","min","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","max","hasNativeLazyLoadSupport","HTMLImageElement","prototype","gatsbyImageIsInstalled","GATSBY___IMAGE","getImage","node","_node$images","_node$images$fallback","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","gatsbyImage","isGatsbyImageParent","childImageSharp","_node$childImageSharp","Sizer","React","style","paddingTop","maxWidth","display","alt","role","position","Image","loading","shouldLoad","props","decoding","undefined","Picture","fallbackImage","media","key","propTypes","PropTypes","string","isRequired","bool","displayName","exact","arrayOf","oneOfType","Placeholder","_Picture$propTypes","propName","componentName","MainImage","renderImageToStringPromise","renderImage","altValidator","object","imageCache","GatsbyImageHydrator","as","className","preactClass","onStartLoad","onLoad","onError","wrapperStyle","overflow","verticalAlign","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","cacheKey","useMemo","JSON","stringify","sizer","getSizer","useEffect","Promise","then","renderImageToString","swapPlaceholderImage","animationFrame","cleanupCallback","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","onLoadListener","removeEventListener","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","createElement","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","process","env","NODE_ENV","checkDimensionProps","number","validLayouts","StaticImage","imageData","__imageData","__error","_getStaticImage","GatsbyImageBrowser","children","Fragment","baseUrl","urlBuilder","sourceWidth","sourceHeight","_breakpoints","_generateImageSource","left","top","transform","transition","willChange","opacity","objectFit","objectPosition","bottom","right","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","defaultImage","artDirected","output","source"],"mappings":"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"}